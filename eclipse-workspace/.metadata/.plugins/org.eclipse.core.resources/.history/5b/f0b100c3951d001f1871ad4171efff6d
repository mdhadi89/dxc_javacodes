package hadiEncoder;

import java.util.Scanner;
import java.util.HashMap;

public class test2 {
    private static final String REFERENCE_TABLE = "0A/+1B,2C-3D.4E/5F6G7H8I9J10K11L12M13N14O15P16Q17R18S19T20U21V22W23X24Y25Z26Z27.28.29.30.31.32.33.34.35.36.37.38.39.40.41.42.43./.*";
    private static final int TABLE_SIZE = REFERENCE_TABLE.length();

    // Method to encode the plaintext
    public String encode(String plainText, char offsetChar) {
        int offset = getOffset(offsetChar);
        StringBuilder encodedText = new StringBuilder();

        for (char c : plainText.toCharArray()) {
            int index = REFERENCE_TABLE.indexOf(c);
            if (index != -1) {
                int newIndex = (index + offset) % TABLE_SIZE;
                encodedText.append(REFERENCE_TABLE.charAt(newIndex));
            } else {
                encodedText.append(c);
            }
        }

        encodedText.insert(0, offsetChar); // Insert the offset character at the beginning
        return encodedText.toString();
    }

    // Method to decode the encoded text
    public String decode(String encodedText) {
        char offsetChar = encodedText.charAt(0);
        int offset = getOffset(offsetChar);
        StringBuilder decodedText = new StringBuilder();

        for (int i = 1; i < encodedText.length(); i++) {
            char c = encodedText.charAt(i);
            int index = REFERENCE_TABLE.indexOf(c);
            if (index != -1) {
                int newIndex = (index - offset + TABLE_SIZE) % TABLE_SIZE;
                decodedText.append(REFERENCE_TABLE.charAt(newIndex));
            } else {
                decodedText.append(c);
            }
        }

        return decodedText.toString();
    }

    // Helper method to get the offset from the offset character
    private int getOffset(char offsetChar) {
        int offset = REFERENCE_TABLE.indexOf(offsetChar);
        return (offset == -1) ? 0 : offset;
    }

    public static void main(String[] args) {
        EncoderDecoder encoderDecoder = new EncoderDecoder();
        Scanner scanner = new Scanner(System.in);

        // Get user input for plain text
        System.out.print("Enter plain text: ");
        String plainText = scanner.nextLine();

        // Get user input for offset character
        System.out.print("Enter offset character: ");
        char offsetChar = scanner.next().charAt(0);

        // Encode the plain text
        String encodedText = encoderDecoder.encode(plainText.toUpperCase(), offsetChar);
        System.out.println("Encoded Text: " + encodedText);

        // Decode the encoded text
        String decodedText = encoderDecoder.decode(encodedText.toUpperCase());
        System.out.println("Decoded Text: " + decodedText);

        scanner.close();
    }
}

